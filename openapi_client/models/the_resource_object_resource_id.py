# coding: utf-8

"""
    Wyscout API (v4)

    [Customer resources](https://www.hudl.com/support/wyscout) | [Customer support](https://www.hudl.com/support/contact)  [Wyscout Data resources](https://footballdata.wyscout.com/resources/)  **IMPORTANT: Version switching planned for July 20th 2021.**  On July 20th 2021 we will switch v3 as the Current version. V2 will become Legacy.  Please see [Versioning](#section/Versioning) section for any related details.  # Overview  This is the product documentation for our API service, in which you can find all definitions and technical information you may need.  # Authentication  ## Overview  This page explain how to authenticate to Wyscout APIs using Basic Access Authentication.  ## Using your client software  Depending on your client software you should be provided with a mechanism for supplying an username and password: that will build the required authentication headers automatically.  For example you can specify the -u argument with curl as username:password.  ## Supplying Basic Access Authentication headers  It is possible to construct the authentication headers manually:  * Build a string of the form username:password. * Encode the string in Base64 * Supply an `Authorization` header with content `Basic` followed by the encoded string.   For example, the string `Aladdin:OpenSesame` encodes to `QWxhZGRpbjpPcGVuU2VzYW1l` in base64,   so you would use this string `Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l`  ## Rate limits  To avoid services overload requests are rate limited. The Wyscout API currently enforces a limit of **12** request per second per API Key.  If the rate limit is exceeded, the API will return the following HTTP 429 response:  ```json   {     \"error\": {       \"code\": 429,       \"message\": \"Too many requests\"     }   } ```  # Data glossary and definitions  At the following link you can find our Data Glossary that describes events, metrics and concepts used across the Wyscout API, Platform and reports.  <a href=\"https://dataglossary.wyscout.com/\" target=\"_blank\">Wyscout Data Glossary</a>   ## Pitch coordinates  ![Pitch map](assets/images/WyscoutDataCoordinates.png)  The event's coordinates depends on the subject. The subject's goal to be defended is always **x=0%** and the attack is always **x=100%**. All values are % expressed as **(x,y)**.  # Versioning  Wyscout gives you the chance to choose between three different sets of API endpoints.  ## Current The latest available version. It includes the most recent endpoints and improvements.  ## Preview The beta version of our next official release. Here we start to implement future improvements and new endpoints.  ## Legacy The old version. This is still available and running, in order to let users adapt their tools to new ones.  ## Version Switch  Wyscout will constantly improve its dataset by adding new endpoints and improving the existing ones. “Preview” version is where you can find last delivered updates. When a new and improved “Current” version is released, the previous version becomes “Legacy” – which means it will not immediately cease to exist, giving you the time to adapt your systems. It will be available and running until another new version – “Current” – is released, at least six months after the previous one.  ![Version Switch](assets/images/WyscoutVersionSwitch.png)  Documentation on [apidocs.wyscout.com](apidocs.wyscout.com) will always be available also for “Legacy” version. Each version will receive support as from the following table:  ![Version Support](assets/images/WyscoutVersionSupport.png)

    The version of the OpenAPI document: 2024-05-09T09:09:27Z
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.area import Area
from openapi_client.models.coach import Coach
from openapi_client.models.competition import Competition
from openapi_client.models.match import Match
from openapi_client.models.match_events import MatchEvents
from openapi_client.models.player import Player
from openapi_client.models.player_career import PlayerCareer
from openapi_client.models.player_injuries import PlayerInjuries
from openapi_client.models.player_transfer import PlayerTransfer
from openapi_client.models.referee import Referee
from openapi_client.models.round import Round
from openapi_client.models.season import Season
from openapi_client.models.team import Team
from openapi_client.models.team_career import TeamCareer
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

THERESOURCEOBJECTRESOURCEID_ONE_OF_SCHEMAS = ["Area", "Coach", "Competition", "Match", "MatchEvents", "Player", "PlayerCareer", "PlayerInjuries", "PlayerTransfer", "Referee", "Round", "Season", "Team", "TeamCareer"]

class TheResourceObjectResourceId(BaseModel):
    """
    TheResourceObjectResourceId
    """
    # data type: Area
    oneof_schema_1_validator: Optional[Area] = None
    # data type: Coach
    oneof_schema_2_validator: Optional[Coach] = None
    # data type: Competition
    oneof_schema_3_validator: Optional[Competition] = None
    # data type: Match
    oneof_schema_4_validator: Optional[Match] = None
    # data type: MatchEvents
    oneof_schema_5_validator: Optional[MatchEvents] = None
    # data type: PlayerCareer
    oneof_schema_6_validator: Optional[PlayerCareer] = None
    # data type: PlayerInjuries
    oneof_schema_7_validator: Optional[PlayerInjuries] = None
    # data type: Player
    oneof_schema_8_validator: Optional[Player] = None
    # data type: Referee
    oneof_schema_9_validator: Optional[Referee] = None
    # data type: Round
    oneof_schema_10_validator: Optional[Round] = None
    # data type: Season
    oneof_schema_11_validator: Optional[Season] = None
    # data type: TeamCareer
    oneof_schema_12_validator: Optional[TeamCareer] = None
    # data type: Team
    oneof_schema_13_validator: Optional[Team] = None
    # data type: PlayerTransfer
    oneof_schema_14_validator: Optional[PlayerTransfer] = None
    actual_instance: Optional[Union[Area, Coach, Competition, Match, MatchEvents, Player, PlayerCareer, PlayerInjuries, PlayerTransfer, Referee, Round, Season, Team, TeamCareer]] = None
    one_of_schemas: Set[str] = { "Area", "Coach", "Competition", "Match", "MatchEvents", "Player", "PlayerCareer", "PlayerInjuries", "PlayerTransfer", "Referee", "Round", "Season", "Team", "TeamCareer" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = TheResourceObjectResourceId.model_construct()
        error_messages = []
        match = 0
        # validate data type: Area
        if not isinstance(v, Area):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Area`")
        else:
            match += 1
        # validate data type: Coach
        if not isinstance(v, Coach):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Coach`")
        else:
            match += 1
        # validate data type: Competition
        if not isinstance(v, Competition):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Competition`")
        else:
            match += 1
        # validate data type: Match
        if not isinstance(v, Match):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Match`")
        else:
            match += 1
        # validate data type: MatchEvents
        if not isinstance(v, MatchEvents):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MatchEvents`")
        else:
            match += 1
        # validate data type: PlayerCareer
        if not isinstance(v, PlayerCareer):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PlayerCareer`")
        else:
            match += 1
        # validate data type: PlayerInjuries
        if not isinstance(v, PlayerInjuries):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PlayerInjuries`")
        else:
            match += 1
        # validate data type: Player
        if not isinstance(v, Player):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Player`")
        else:
            match += 1
        # validate data type: Referee
        if not isinstance(v, Referee):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Referee`")
        else:
            match += 1
        # validate data type: Round
        if not isinstance(v, Round):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Round`")
        else:
            match += 1
        # validate data type: Season
        if not isinstance(v, Season):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Season`")
        else:
            match += 1
        # validate data type: TeamCareer
        if not isinstance(v, TeamCareer):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TeamCareer`")
        else:
            match += 1
        # validate data type: Team
        if not isinstance(v, Team):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Team`")
        else:
            match += 1
        # validate data type: PlayerTransfer
        if not isinstance(v, PlayerTransfer):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PlayerTransfer`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in TheResourceObjectResourceId with oneOf schemas: Area, Coach, Competition, Match, MatchEvents, Player, PlayerCareer, PlayerInjuries, PlayerTransfer, Referee, Round, Season, Team, TeamCareer. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in TheResourceObjectResourceId with oneOf schemas: Area, Coach, Competition, Match, MatchEvents, Player, PlayerCareer, PlayerInjuries, PlayerTransfer, Referee, Round, Season, Team, TeamCareer. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into Area
        try:
            instance.actual_instance = Area.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Coach
        try:
            instance.actual_instance = Coach.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Competition
        try:
            instance.actual_instance = Competition.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Match
        try:
            instance.actual_instance = Match.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MatchEvents
        try:
            instance.actual_instance = MatchEvents.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PlayerCareer
        try:
            instance.actual_instance = PlayerCareer.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PlayerInjuries
        try:
            instance.actual_instance = PlayerInjuries.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Player
        try:
            instance.actual_instance = Player.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Referee
        try:
            instance.actual_instance = Referee.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Round
        try:
            instance.actual_instance = Round.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Season
        try:
            instance.actual_instance = Season.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TeamCareer
        try:
            instance.actual_instance = TeamCareer.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Team
        try:
            instance.actual_instance = Team.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PlayerTransfer
        try:
            instance.actual_instance = PlayerTransfer.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into TheResourceObjectResourceId with oneOf schemas: Area, Coach, Competition, Match, MatchEvents, Player, PlayerCareer, PlayerInjuries, PlayerTransfer, Referee, Round, Season, Team, TeamCareer. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into TheResourceObjectResourceId with oneOf schemas: Area, Coach, Competition, Match, MatchEvents, Player, PlayerCareer, PlayerInjuries, PlayerTransfer, Referee, Round, Season, Team, TeamCareer. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], Area, Coach, Competition, Match, MatchEvents, Player, PlayerCareer, PlayerInjuries, PlayerTransfer, Referee, Round, Season, Team, TeamCareer]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


