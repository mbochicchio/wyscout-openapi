# coding: utf-8

"""
    Wyscout API (v4)

    [Customer resources](https://www.hudl.com/support/wyscout) | [Customer support](https://www.hudl.com/support/contact)  [Wyscout Data resources](https://footballdata.wyscout.com/resources/)  **IMPORTANT: Version switching planned for July 20th 2021.**  On July 20th 2021 we will switch v3 as the Current version. V2 will become Legacy.  Please see [Versioning](#section/Versioning) section for any related details.  # Overview  This is the product documentation for our API service, in which you can find all definitions and technical information you may need.  # Authentication  ## Overview  This page explain how to authenticate to Wyscout APIs using Basic Access Authentication.  ## Using your client software  Depending on your client software you should be provided with a mechanism for supplying an username and password: that will build the required authentication headers automatically.  For example you can specify the -u argument with curl as username:password.  ## Supplying Basic Access Authentication headers  It is possible to construct the authentication headers manually:  * Build a string of the form username:password. * Encode the string in Base64 * Supply an `Authorization` header with content `Basic` followed by the encoded string.   For example, the string `Aladdin:OpenSesame` encodes to `QWxhZGRpbjpPcGVuU2VzYW1l` in base64,   so you would use this string `Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l`  ## Rate limits  To avoid services overload requests are rate limited. The Wyscout API currently enforces a limit of **12** request per second per API Key.  If the rate limit is exceeded, the API will return the following HTTP 429 response:  ```json   {     \"error\": {       \"code\": 429,       \"message\": \"Too many requests\"     }   } ```  # Data glossary and definitions  At the following link you can find our Data Glossary that describes events, metrics and concepts used across the Wyscout API, Platform and reports.  <a href=\"https://dataglossary.wyscout.com/\" target=\"_blank\">Wyscout Data Glossary</a>   ## Pitch coordinates  ![Pitch map](assets/images/WyscoutDataCoordinates.png)  The event's coordinates depends on the subject. The subject's goal to be defended is always **x=0%** and the attack is always **x=100%**. All values are % expressed as **(x,y)**.  # Versioning  Wyscout gives you the chance to choose between three different sets of API endpoints.  ## Current The latest available version. It includes the most recent endpoints and improvements.  ## Preview The beta version of our next official release. Here we start to implement future improvements and new endpoints.  ## Legacy The old version. This is still available and running, in order to let users adapt their tools to new ones.  ## Version Switch  Wyscout will constantly improve its dataset by adding new endpoints and improving the existing ones. “Preview” version is where you can find last delivered updates. When a new and improved “Current” version is released, the previous version becomes “Legacy” – which means it will not immediately cease to exist, giving you the time to adapt your systems. It will be available and running until another new version – “Current” – is released, at least six months after the previous one.  ![Version Switch](assets/images/WyscoutVersionSwitch.png)  Documentation on [apidocs.wyscout.com](apidocs.wyscout.com) will always be available also for “Legacy” version. Each version will receive support as from the following table:  ![Version Support](assets/images/WyscoutVersionSupport.png)

    The version of the OpenAPI document: 2024-05-09T09:09:27Z
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.aerial_duel_details import AerialDuelDetails
from openapi_client.models.carry_details import CarryDetails
from openapi_client.models.event_location import EventLocation
from openapi_client.models.event_type import EventType
from openapi_client.models.ground_duel_details import GroundDuelDetails
from openapi_client.models.infraction_details import InfractionDetails
from openapi_client.models.opponent_team_details import OpponentTeamDetails
from openapi_client.models.pass_details import PassDetails
from openapi_client.models.player_details import PlayerDetails
from openapi_client.models.possession_details import PossessionDetails
from openapi_client.models.shot_details import ShotDetails
from openapi_client.models.team_details1 import TeamDetails1
from typing import Optional, Set
from typing_extensions import Self

class MatchEvent(BaseModel):
    """
    MatchEvent
    """ # noqa: E501
    aerial_duel: Optional[AerialDuelDetails] = Field(default=None, alias="aerialDuel")
    carry: Optional[CarryDetails] = None
    ground_duel: Optional[GroundDuelDetails] = Field(default=None, alias="groundDuel")
    id: Optional[StrictInt] = None
    infraction: Optional[InfractionDetails] = None
    location: Optional[EventLocation] = None
    match_id: Optional[StrictInt] = Field(default=None, alias="matchId")
    match_period: Optional[StrictStr] = Field(default=None, description="<table><thead><tr><th>Period</th><th>Description</th></tr></thead><tbody><tr><td>1H</td><td>First Half Time</td></tr><tr><td>2H</td><td>Second Half Time</td></tr><tr><td>E1</td><td>First Extra Time</td></tr><tr><td>E2</td><td>Second Extra Time</td></tr><tr><td>P</td><td>Pentalties Time</td></tr></tbody></table>", alias="matchPeriod")
    match_timestamp: Optional[StrictStr] = Field(default=None, alias="matchTimestamp")
    minute: Optional[StrictInt] = None
    opponent_team: Optional[OpponentTeamDetails] = Field(default=None, alias="opponentTeam")
    var_pass: Optional[PassDetails] = Field(default=None, alias="pass")
    player: Optional[PlayerDetails] = None
    possession: Optional[PossessionDetails] = None
    related_event_id: Optional[StrictInt] = Field(default=None, alias="relatedEventId")
    second: Optional[StrictInt] = None
    shot: Optional[ShotDetails] = None
    team: Optional[TeamDetails1] = None
    type: Optional[EventType] = None
    video_timestamp: Optional[StrictStr] = Field(default=None, alias="videoTimestamp")
    __properties: ClassVar[List[str]] = ["aerialDuel", "carry", "groundDuel", "id", "infraction", "location", "matchId", "matchPeriod", "matchTimestamp", "minute", "opponentTeam", "pass", "player", "possession", "relatedEventId", "second", "shot", "team", "type", "videoTimestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MatchEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aerial_duel
        if self.aerial_duel:
            _dict['aerialDuel'] = self.aerial_duel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of carry
        if self.carry:
            _dict['carry'] = self.carry.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ground_duel
        if self.ground_duel:
            _dict['groundDuel'] = self.ground_duel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of infraction
        if self.infraction:
            _dict['infraction'] = self.infraction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of opponent_team
        if self.opponent_team:
            _dict['opponentTeam'] = self.opponent_team.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_pass
        if self.var_pass:
            _dict['pass'] = self.var_pass.to_dict()
        # override the default output from pydantic by calling `to_dict()` of player
        if self.player:
            _dict['player'] = self.player.to_dict()
        # override the default output from pydantic by calling `to_dict()` of possession
        if self.possession:
            _dict['possession'] = self.possession.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shot
        if self.shot:
            _dict['shot'] = self.shot.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team
        if self.team:
            _dict['team'] = self.team.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MatchEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aerialDuel": AerialDuelDetails.from_dict(obj["aerialDuel"]) if obj.get("aerialDuel") is not None else None,
            "carry": CarryDetails.from_dict(obj["carry"]) if obj.get("carry") is not None else None,
            "groundDuel": GroundDuelDetails.from_dict(obj["groundDuel"]) if obj.get("groundDuel") is not None else None,
            "id": obj.get("id"),
            "infraction": InfractionDetails.from_dict(obj["infraction"]) if obj.get("infraction") is not None else None,
            "location": EventLocation.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "matchId": obj.get("matchId"),
            "matchPeriod": obj.get("matchPeriod"),
            "matchTimestamp": obj.get("matchTimestamp"),
            "minute": obj.get("minute"),
            "opponentTeam": OpponentTeamDetails.from_dict(obj["opponentTeam"]) if obj.get("opponentTeam") is not None else None,
            "pass": PassDetails.from_dict(obj["pass"]) if obj.get("pass") is not None else None,
            "player": PlayerDetails.from_dict(obj["player"]) if obj.get("player") is not None else None,
            "possession": PossessionDetails.from_dict(obj["possession"]) if obj.get("possession") is not None else None,
            "relatedEventId": obj.get("relatedEventId"),
            "second": obj.get("second"),
            "shot": ShotDetails.from_dict(obj["shot"]) if obj.get("shot") is not None else None,
            "team": TeamDetails1.from_dict(obj["team"]) if obj.get("team") is not None else None,
            "type": EventType.from_dict(obj["type"]) if obj.get("type") is not None else None,
            "videoTimestamp": obj.get("videoTimestamp")
        })
        return _obj


