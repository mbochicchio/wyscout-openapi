# coding: utf-8

"""
    Wyscout API (v4)

    [Customer resources](https://www.hudl.com/support/wyscout) | [Customer support](https://www.hudl.com/support/contact)  [Wyscout Data resources](https://footballdata.wyscout.com/resources/)  **IMPORTANT: Version switching planned for July 20th 2021.**  On July 20th 2021 we will switch v3 as the Current version. V2 will become Legacy.  Please see [Versioning](#section/Versioning) section for any related details.  # Overview  This is the product documentation for our API service, in which you can find all definitions and technical information you may need.  # Authentication  ## Overview  This page explain how to authenticate to Wyscout APIs using Basic Access Authentication.  ## Using your client software  Depending on your client software you should be provided with a mechanism for supplying an username and password: that will build the required authentication headers automatically.  For example you can specify the -u argument with curl as username:password.  ## Supplying Basic Access Authentication headers  It is possible to construct the authentication headers manually:  * Build a string of the form username:password. * Encode the string in Base64 * Supply an `Authorization` header with content `Basic` followed by the encoded string.   For example, the string `Aladdin:OpenSesame` encodes to `QWxhZGRpbjpPcGVuU2VzYW1l` in base64,   so you would use this string `Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l`  ## Rate limits  To avoid services overload requests are rate limited. The Wyscout API currently enforces a limit of **12** request per second per API Key.  If the rate limit is exceeded, the API will return the following HTTP 429 response:  ```json   {     \"error\": {       \"code\": 429,       \"message\": \"Too many requests\"     }   } ```  # Data glossary and definitions  At the following link you can find our Data Glossary that describes events, metrics and concepts used across the Wyscout API, Platform and reports.  <a href=\"https://dataglossary.wyscout.com/\" target=\"_blank\">Wyscout Data Glossary</a>   ## Pitch coordinates  ![Pitch map](assets/images/WyscoutDataCoordinates.png)  The event's coordinates depends on the subject. The subject's goal to be defended is always **x=0%** and the attack is always **x=100%**. All values are % expressed as **(x,y)**.  # Versioning  Wyscout gives you the chance to choose between three different sets of API endpoints.  ## Current The latest available version. It includes the most recent endpoints and improvements.  ## Preview The beta version of our next official release. Here we start to implement future improvements and new endpoints.  ## Legacy The old version. This is still available and running, in order to let users adapt their tools to new ones.  ## Version Switch  Wyscout will constantly improve its dataset by adding new endpoints and improving the existing ones. “Preview” version is where you can find last delivered updates. When a new and improved “Current” version is released, the previous version becomes “Legacy” – which means it will not immediately cease to exist, giving you the time to adapt your systems. It will be available and running until another new version – “Current” – is released, at least six months after the previous one.  ![Version Switch](assets/images/WyscoutVersionSwitch.png)  Documentation on [apidocs.wyscout.com](apidocs.wyscout.com) will always be available also for “Legacy” version. Each version will receive support as from the following table:  ![Version Support](assets/images/WyscoutVersionSupport.png)

    The version of the OpenAPI document: 2024-05-09T09:09:27Z
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EventType(BaseModel):
    """
    The event is identified by its primary and secondary types. The primary type is guaranteed to be present for all the events and has only one value
    """ # noqa: E501
    primary: Optional[StrictStr] = Field(default=None, description="<table><thead><tr><th>Primary event types</th></tr></thead><tbody><tr><td>acceleration</td></tr><tr><td>clearance</td></tr><tr><td>corner</td></tr><tr><td>duel</td></tr><tr><td>fairplay</td></tr><tr><td>free_kick</td></tr><tr><td>game_interruption</td></tr><tr><td>goal_kick</td></tr><tr><td>goalkeeper_exit</td></tr><tr><td>infraction</td></tr><tr><td>interception</td></tr><tr><td>offside</td></tr><tr><td>own_goal</td></tr><tr><td>pass</td></tr><tr><td>penalty</td></tr><tr><td>pressing_attempt</td></tr><tr><td>received_pass</td></tr><tr><td>shot_against</td></tr><tr><td>throw_in</td></tr><tr><td>touch</td></tr><tr><td>postmatch_penalty</td></tr><tr><td>postmatch_penalty_faced</td></tr></tbody></table>")
    secondary: Optional[List[StrictStr]] = Field(default=None, description="<table><thead><tr><th>Secondary event types</th></tr></thead><tbody><tr><td>aerial_duel</td></tr><tr><td>assist</td></tr><tr><td>back_pass</td></tr><tr><td>ball_out</td></tr><tr><td>carry</td></tr><tr><td>conceded_goal</td></tr><tr><td>counterpressing_recovery</td></tr><tr><td>cross</td></tr><tr><td>cross_blocked</td></tr><tr><td>deep_completed_cross</td></tr><tr><td>deep_completition</td></tr><tr><td>defensive_duel</td></tr><tr><td>dribble</td></tr><tr><td>dribbled_past_attempt</td></tr><tr><td>forward_pass</td></tr><tr><td>foul</td></tr><tr><td>foul_suffered</td></tr><tr><td>free_kick_cross</td></tr><tr><td>free_kick_shot</td></tr><tr><td>goal</td></tr><tr><td>ground_duel</td></tr><tr><td>hand_pass</td></tr><tr><td>head_pass</td></tr><tr><td>head_shot</td></tr><tr><td>key_pass</td></tr><tr><td>lateral_pass</td></tr><tr><td>linkup_play</td></tr><tr><td>long_pass</td></tr><tr><td>loose_ball_duel</td></tr><tr><td>loss</td></tr><tr><td>offensive_duel</td></tr><tr><td>opportunity</td></tr><tr><td>pass_into_penalty_area</td></tr><tr><td>pass_to_final_third</td></tr><tr><td>penalty_conceded_goal</td></tr><tr><td>penalty_foul</td></tr><tr><td>penalty_goal</td></tr><tr><td>penalty_save</td></tr><tr><td>pressing_duel</td></tr><tr><td>progressive_pass</td></tr><tr><td>progressive_run</td></tr><tr><td>recovery</td></tr><tr><td>red_card</td></tr><tr><td>save</td></tr><tr><td>save_with_reflex</td></tr><tr><td>second_assist</td></tr><tr><td>short_or_medium_pass</td></tr><tr><td>shot_after_corner</td></tr><tr><td>shot_after_free_kick</td></tr><tr><td>shot_after_throw_in</td></tr><tr><td>shot_assist</td></tr><tr><td>shot_block</td></tr><tr><td>sliding_tackle</td></tr><tr><td>smart_pass</td></tr><tr><td>third_assist</td></tr><tr><td>through_pass</td></tr><tr><td>touch_in_box</td></tr><tr><td>under_pressure</td></tr><tr><td>whistle</td></tr><tr><td>yellow_card</td></tr><tr><td>postmatch_penalty_saved</td></tr><tr><td>conceded_postmatch_penalty</td></tr></tbody></table>")
    __properties: ClassVar[List[str]] = ["primary", "secondary"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "primary": obj.get("primary"),
            "secondary": obj.get("secondary")
        })
        return _obj


