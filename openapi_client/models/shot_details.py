# coding: utf-8

"""
    Wyscout API (v4)

    [Customer resources](https://www.hudl.com/support/wyscout) | [Customer support](https://www.hudl.com/support/contact)  [Wyscout Data resources](https://footballdata.wyscout.com/resources/)  **IMPORTANT: Version switching planned for July 20th 2021.**  On July 20th 2021 we will switch v3 as the Current version. V2 will become Legacy.  Please see [Versioning](#section/Versioning) section for any related details.  # Overview  This is the product documentation for our API service, in which you can find all definitions and technical information you may need.  # Authentication  ## Overview  This page explain how to authenticate to Wyscout APIs using Basic Access Authentication.  ## Using your client software  Depending on your client software you should be provided with a mechanism for supplying an username and password: that will build the required authentication headers automatically.  For example you can specify the -u argument with curl as username:password.  ## Supplying Basic Access Authentication headers  It is possible to construct the authentication headers manually:  * Build a string of the form username:password. * Encode the string in Base64 * Supply an `Authorization` header with content `Basic` followed by the encoded string.   For example, the string `Aladdin:OpenSesame` encodes to `QWxhZGRpbjpPcGVuU2VzYW1l` in base64,   so you would use this string `Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l`  ## Rate limits  To avoid services overload requests are rate limited. The Wyscout API currently enforces a limit of **12** request per second per API Key.  If the rate limit is exceeded, the API will return the following HTTP 429 response:  ```json   {     \"error\": {       \"code\": 429,       \"message\": \"Too many requests\"     }   } ```  # Data glossary and definitions  At the following link you can find our Data Glossary that describes events, metrics and concepts used across the Wyscout API, Platform and reports.  <a href=\"https://dataglossary.wyscout.com/\" target=\"_blank\">Wyscout Data Glossary</a>   ## Pitch coordinates  ![Pitch map](assets/images/WyscoutDataCoordinates.png)  The event's coordinates depends on the subject. The subject's goal to be defended is always **x=0%** and the attack is always **x=100%**. All values are % expressed as **(x,y)**.  # Versioning  Wyscout gives you the chance to choose between three different sets of API endpoints.  ## Current The latest available version. It includes the most recent endpoints and improvements.  ## Preview The beta version of our next official release. Here we start to implement future improvements and new endpoints.  ## Legacy The old version. This is still available and running, in order to let users adapt their tools to new ones.  ## Version Switch  Wyscout will constantly improve its dataset by adding new endpoints and improving the existing ones. “Preview” version is where you can find last delivered updates. When a new and improved “Current” version is released, the previous version becomes “Legacy” – which means it will not immediately cease to exist, giving you the time to adapt your systems. It will be available and running until another new version – “Current” – is released, at least six months after the previous one.  ![Version Switch](assets/images/WyscoutVersionSwitch.png)  Documentation on [apidocs.wyscout.com](apidocs.wyscout.com) will always be available also for “Legacy” version. Each version will receive support as from the following table:  ![Version Support](assets/images/WyscoutVersionSupport.png)

    The version of the OpenAPI document: 2024-05-09T09:09:27Z
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.goalkeeper_details import GoalkeeperDetails
from typing import Optional, Set
from typing_extensions import Self

class ShotDetails(BaseModel):
    """
    Available when event is a shot or a post-match penalty
    """ # noqa: E501
    body_part: Optional[StrictStr] = Field(default=None, description="<table><thead><tr><th>Possible bodyPart values</th></tr></thead><tbody><tr><td>left_foot</td></tr><tr><td>right_foot</td></tr><tr><td>head_or_other</td></tr></tbody></table>", alias="bodyPart")
    goal_zone: Optional[StrictStr] = Field(default=None, description="<table><thead><tr><th>Label</th><th>Description</th></tr></thead><tbody><tr><td>bc</td><td>Shot blocked</td></tr><tr><td>gb</td><td>Position: Goal low center</td></tr><tr><td>gbr</td><td>Position: Goal low right</td></tr><tr><td>gc</td><td>Position: Goal center</td></tr><tr><td>gl</td><td>Position: Goal center left</td></tr><tr><td>glb</td><td>Position: Goal low left</td></tr><tr><td>gr</td><td>Position: Goal center right</td></tr><tr><td>gt</td><td>Position: Goal high center</td></tr><tr><td>gtl</td><td>Position: Goal high left</td></tr><tr><td>gtr</td><td>Position: Goal high right</td></tr><tr><td>obr</td><td>Position: Out low right</td></tr><tr><td>ol</td><td>Position: Out center left</td></tr><tr><td>olb</td><td>Position: Out low left</td></tr><tr><td>or</td><td>Position: Out center right</td></tr><tr><td>ot</td><td>Position: Out high center</td></tr><tr><td>otl</td><td>Position: Out high left</td></tr><tr><td>otr</td><td>Position: Out high right</td></tr><tr><td>pbr</td><td>Position: Post low right</td></tr><tr><td>pl</td><td>Position: Post center left</td></tr><tr><td>plb</td><td>Position: Post low left</td></tr><tr><td>pr</td><td>Position: Post center right</td></tr><tr><td>pt</td><td>Position: Post high center</td></tr><tr><td>ptl</td><td>Position: Post high left</td></tr><tr><td>ptr</td><td>Position: Post high right</td></tr></tbody></table>", alias="goalZone")
    goalkeeper: Optional[GoalkeeperDetails] = None
    goalkeeper_action_id: Optional[StrictInt] = Field(default=None, alias="goalkeeperActionId")
    is_goal: Optional[StrictBool] = Field(default=None, description="If true this shot results in a goal", alias="isGoal")
    on_target: Optional[StrictBool] = Field(default=None, description="If true this shot is on target", alias="onTarget")
    post_shot_xg: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="postShotXg")
    xg: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Expected goals (xG) is a predictive ML model used to assess the likelihood of scoring for every shot made in the game")
    __properties: ClassVar[List[str]] = ["bodyPart", "goalZone", "goalkeeper", "goalkeeperActionId", "isGoal", "onTarget", "postShotXg", "xg"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShotDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of goalkeeper
        if self.goalkeeper:
            _dict['goalkeeper'] = self.goalkeeper.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShotDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bodyPart": obj.get("bodyPart"),
            "goalZone": obj.get("goalZone"),
            "goalkeeper": GoalkeeperDetails.from_dict(obj["goalkeeper"]) if obj.get("goalkeeper") is not None else None,
            "goalkeeperActionId": obj.get("goalkeeperActionId"),
            "isGoal": obj.get("isGoal"),
            "onTarget": obj.get("onTarget"),
            "postShotXg": obj.get("postShotXg"),
            "xg": obj.get("xg")
        })
        return _obj


