# coding: utf-8

"""
    Wyscout API (v4)

    [Customer resources](https://www.hudl.com/support/wyscout) | [Customer support](https://www.hudl.com/support/contact)  [Wyscout Data resources](https://footballdata.wyscout.com/resources/)  **IMPORTANT: Version switching planned for July 20th 2021.**  On July 20th 2021 we will switch v3 as the Current version. V2 will become Legacy.  Please see [Versioning](#section/Versioning) section for any related details.  # Overview  This is the product documentation for our API service, in which you can find all definitions and technical information you may need.  # Authentication  ## Overview  This page explain how to authenticate to Wyscout APIs using Basic Access Authentication.  ## Using your client software  Depending on your client software you should be provided with a mechanism for supplying an username and password: that will build the required authentication headers automatically.  For example you can specify the -u argument with curl as username:password.  ## Supplying Basic Access Authentication headers  It is possible to construct the authentication headers manually:  * Build a string of the form username:password. * Encode the string in Base64 * Supply an `Authorization` header with content `Basic` followed by the encoded string.   For example, the string `Aladdin:OpenSesame` encodes to `QWxhZGRpbjpPcGVuU2VzYW1l` in base64,   so you would use this string `Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l`  ## Rate limits  To avoid services overload requests are rate limited. The Wyscout API currently enforces a limit of **12** request per second per API Key.  If the rate limit is exceeded, the API will return the following HTTP 429 response:  ```json   {     \"error\": {       \"code\": 429,       \"message\": \"Too many requests\"     }   } ```  # Data glossary and definitions  At the following link you can find our Data Glossary that describes events, metrics and concepts used across the Wyscout API, Platform and reports.  <a href=\"https://dataglossary.wyscout.com/\" target=\"_blank\">Wyscout Data Glossary</a>   ## Pitch coordinates  ![Pitch map](assets/images/WyscoutDataCoordinates.png)  The event's coordinates depends on the subject. The subject's goal to be defended is always **x=0%** and the attack is always **x=100%**. All values are % expressed as **(x,y)**.  # Versioning  Wyscout gives you the chance to choose between three different sets of API endpoints.  ## Current The latest available version. It includes the most recent endpoints and improvements.  ## Preview The beta version of our next official release. Here we start to implement future improvements and new endpoints.  ## Legacy The old version. This is still available and running, in order to let users adapt their tools to new ones.  ## Version Switch  Wyscout will constantly improve its dataset by adding new endpoints and improving the existing ones. “Preview” version is where you can find last delivered updates. When a new and improved “Current” version is released, the previous version becomes “Legacy” – which means it will not immediately cease to exist, giving you the time to adapt your systems. It will be available and running until another new version – “Current” – is released, at least six months after the previous one.  ![Version Switch](assets/images/WyscoutVersionSwitch.png)  Documentation on [apidocs.wyscout.com](apidocs.wyscout.com) will always be available also for “Legacy” version. Each version will receive support as from the following table:  ![Version Support](assets/images/WyscoutVersionSupport.png)

    The version of the OpenAPI document: 2024-05-09T09:09:27Z
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PlayerAdvancedStatsAverage(BaseModel):
    """
    PlayerAdvancedStatsAverage
    """ # noqa: E501
    accelerations: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A run with the ball with a significant speed up")
    aerial_duels: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="When two or more players from opposing teams jump to compete for the ball", alias="aerialDuels")
    assists: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The last action of a player from the goalscoring team, prior to the Goal being scored by a teammate, or an Own goal")
    attacking_actions: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="attackingActions")
    back_passes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="An attempt to pass the ball back to a teammate", alias="backPasses")
    ball_losses: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Any Action that ends a Possession of the current team", alias="ballLosses")
    ball_recoveries: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Any Action that ends a Possession of the opposition team (the last action of this possession is a Loss) and starts a Possession for current team", alias="ballRecoveries")
    clearances: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="An Action (generally a pass) when the player, while having other option, to pass or to hold the ball, is instead clearing it, either with a long pass forward without a precise target or for a throw in/corner kick, playing safe")
    corners: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A corner kick served as specified in law 17 IFAB Laws of the Game")
    counterpressing_recoveries: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Any Recovery that ends a Possession of the opposition team with length less than 5 seconds", alias="counterpressingRecoveries")
    crosses: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A ball played from the offensive flanks aimed towards a teammate in the area in front of the opponent’s goal")
    dangerous_opponent_half_recoveries: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Ball’s recoveries in the opponent half that lead to a shot within 20s", alias="dangerousOpponentHalfRecoveries")
    dangerous_own_half_losses: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Ball’s losses in his own half that lead to a shot within 20s", alias="dangerousOwnHalfLosses")
    defensive_actions: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="An act of player actively intercepting the ball by anticipating its movement when the opponent is shooting, passing or crossing", alias="defensiveActions")
    defensive_duels: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="When a player attempts to dispossess an opposition player to stop an attack progressing", alias="defensiveDuels")
    defensive_duels_won: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="defensiveDuelsWon")
    direct_free_kicks: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="directFreeKicks")
    direct_free_kicks_on_target: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="directFreeKicksOnTarget")
    direct_red_cards: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Disciplinary action by the referee that is indicated by showing a red card according to law 12.3 of the IFAB Laws of the Game", alias="directRedCards")
    dribble_distance_from_opponent_goal: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="dribbleDistanceFromOpponentGoal")
    dribbles: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="An attempt to move past an opposing player whilst trying to maintain possession of the ball")
    dribbles_against: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="dribblesAgainst")
    dribbles_against_won: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="dribblesAgainstWon")
    duels: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A challenge between two players to gain control of the ball, progress with the ball or change its direction")
    duels_won: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="duelsWon")
    field_aerial_duels: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="fieldAerialDuels")
    field_aerial_duels_won: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="fieldAerialDuelsWon")
    forward_passes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="An attempt to pass the ball forward to a teammate", alias="forwardPasses")
    fouls: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="An offence committed by a player according to law 12 (1, 3) of the IFAB Laws of the Game")
    fouls_suffered: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="An offence committed on a player according to law 12 (1, 3) of the IFAB Laws of the Game", alias="foulsSuffered")
    free_kicks: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The execution of a free kick according to law 13 of the IFAB Laws of the Game", alias="freeKicks")
    free_kicks_on_target: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="freeKicksOnTarget")
    gk_aerial_duels: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="When two or more players from opposing teams jump to compete for the ball, <i>Only Goalkeeper</i>", alias="gkAerialDuels")
    gk_aerial_duels_won: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="<i>Only Goalkeeper</i>", alias="gkAerialDuelsWon")
    gk_conceded_goals: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A goal scored by an opponent as specified in law 10.1 of the IFAB Laws of the Game, <i>Only Goalkeeper</i>", alias="gkConcededGoals")
    gk_exits: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="<i>Only Goalkeeper</i>", alias="gkExits")
    gk_saves: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A successful attempt from the goalkeeper to prevent a shot from being scored, <i>Only Goalkeeper</i>", alias="gkSaves")
    gk_shots_against: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A shot on target faced by the goalkeeper, <i>Only Goalkeeper</i>", alias="gkShotsAgainst")
    gk_successful_exits: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="<i>Only Goalkeeper</i>", alias="gkSuccessfulExits")
    goal_kicks: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A goal kick according to law 16 of the IFAB Laws of the Game", alias="goalKicks")
    goal_kicks_long: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="goalKicksLong")
    goal_kicks_short: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="goalKicksShort")
    goals: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A goal scored as specified in law 10.1 of the IFAB Laws of the Game")
    head_shots: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="An attempt towards the opposition's goal with the intention of scoring", alias="headShots")
    interceptions: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="An act of player actively intercepting the ball by anticipating its movement when the opponent is shooting, passing or crossing")
    key_passes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A pass that immediately creates a clear goal scoring opportunity for a teammate who in turn fails to score", alias="keyPasses")
    lateral_passes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Passes in two 90° angles rotated by 45° facing sideways, longer than 12 meters", alias="lateralPasses")
    linkup_plays: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="An action of an attacking player receiving a ball from a defender or a midfielder with his back to the opposite goal", alias="linkupPlays")
    long_pass_length: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="longPassLength")
    long_passes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A ground pass longer than 45 meters or a high pass longer than 25 meters", alias="longPasses")
    loose_ball_duels: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A duel for a loose ball, when no team has clear ball possession", alias="looseBallDuels")
    loose_ball_duels_won: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="looseBallDuelsWon")
    missed_balls: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Missed ball is a type of Touch when the player is trying to control the ball, but can’t reach it", alias="missedBalls")
    new_defensive_duels_won: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="newDefensiveDuelsWon")
    new_duels_won: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="newDuelsWon")
    new_offensive_duels_won: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="newOffensiveDuelsWon")
    new_successful_dribbles: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="newSuccessfulDribbles")
    offensive_duels: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A ground Duel for the player in possession of the ball", alias="offensiveDuels")
    offensive_duels_won: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="offensiveDuelsWon")
    offsides: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="An offside as described in the law 11 of the IFAB Laws of the Game")
    opponent_half_recoveries: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Ball’s recoveries in the opponent half", alias="opponentHalfRecoveries")
    own_half_losses: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Ball’s losses in his own half", alias="ownHalfLosses")
    pass_length: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="passLength")
    passes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="An attempt to pass the ball to a teammate")
    passes_to_final_third: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Any pass that originates outside of the final third and the next ball touch occurs within the final third", alias="passesToFinalThird")
    penalties: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A shot from a penalty kick as specified in law 14 of the IFAB Laws of the Game")
    progressive_passes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A forward pass that attempts to advance a team significantly closer to the opponent’s goal", alias="progressivePasses")
    progressive_run: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A continuous ball control by one player attempting to draw the team significantly closer to the opponent goal", alias="progressiveRun")
    received_pass: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="receivedPass")
    red_cards: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Disciplinary action by the referee that is indicated by showing a red card according to law 12.3 of the IFAB Laws of the Game", alias="redCards")
    second_assists: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The last action of a player from the goalscoring team, prior to an Assist by a teammate", alias="secondAssists")
    shot_assists: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The last action of a player prior to a teammate having a Shot", alias="shotAssists")
    shot_on_target_assists: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The last action of a player prior to a teammate having a Shot on target", alias="shotOnTargetAssists")
    shots: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="An attempt towards the opposition's goal with the intention of scoring")
    shots_blocked: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="shotsBlocked")
    shots_on_target: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="shotsOnTarget")
    sliding_tackles: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="An aggressive slide on the ground in the legs of the opposition player with a clear intention to dispossess the opponent or to clear the ball out", alias="slidingTackles")
    smart_passes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A creative and penetrative pass that attempts to break the opposition's defensive lines to gain a significant advantage in attack", alias="smartPasses")
    successful_attacking_actions: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="successfulAttackingActions")
    successful_back_passes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="successfulBackPasses")
    successful_crosses: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="successfulCrosses")
    successful_defensive_action: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="successfulDefensiveAction")
    successful_dribbles: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="successfulDribbles")
    successful_forward_passes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="successfulForwardPasses")
    successful_goal_kicks: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="successfulGoalKicks")
    successful_key_passes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="successfulKeyPasses")
    successful_lateral_passes: Optional[StrictInt] = Field(default=None, alias="successfulLateralPasses")
    successful_linkup_plays: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="successfulLinkupPlays")
    successful_long_passes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="successfulLongPasses")
    successful_passes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="successfulPasses")
    successful_passes_to_final_third: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="successfulPassesToFinalThird")
    successful_penalties: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="successfulPenalties")
    successful_progressive_passes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="successfulProgressivePasses")
    successful_sliding_tackles: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="successfulSlidingTackles")
    successful_smart_passes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="successfulSmartPasses")
    successful_through_passes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="successfulThroughPasses")
    successful_vertical_passes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="<i>Deprecated<i>, Same value as successfulLateralPasses", alias="successfulVerticalPasses")
    third_assists: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The last action of a player from the goalscoring team, prior to a Second assist by a teammate", alias="thirdAssists")
    through_passes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A pass played into the space behind the defensive line for a teammate to contest", alias="throughPasses")
    touch_in_box: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="An action (a Pass or a Touch) that happens in the opponent penalty area. Duels are excluded from this definition", alias="touchInBox")
    vertical_passes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="<i>Deprecated<i>, Same value as lateralPasses", alias="verticalPasses")
    xg_assist: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Expected assist (xA) value for a pass is a value of expected goals (xG) or the shot that this pass led to", alias="xgAssist")
    xg_save: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A pre-shot xG value of a probability of the current shot (not necessarily on target) to be scored", alias="xgSave")
    xg_shot: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Expected goals (xG) is a predictive ML model used to assess the likelihood of scoring for every shot made in the game", alias="xgShot")
    yellow_cards: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Disciplinary action by the referee that is indicated by showing a yellow card according to law 12.3 of the IFAB Laws of the Game", alias="yellowCards")
    __properties: ClassVar[List[str]] = ["accelerations", "aerialDuels", "assists", "attackingActions", "backPasses", "ballLosses", "ballRecoveries", "clearances", "corners", "counterpressingRecoveries", "crosses", "dangerousOpponentHalfRecoveries", "dangerousOwnHalfLosses", "defensiveActions", "defensiveDuels", "defensiveDuelsWon", "directFreeKicks", "directFreeKicksOnTarget", "directRedCards", "dribbleDistanceFromOpponentGoal", "dribbles", "dribblesAgainst", "dribblesAgainstWon", "duels", "duelsWon", "fieldAerialDuels", "fieldAerialDuelsWon", "forwardPasses", "fouls", "foulsSuffered", "freeKicks", "freeKicksOnTarget", "gkAerialDuels", "gkAerialDuelsWon", "gkConcededGoals", "gkExits", "gkSaves", "gkShotsAgainst", "gkSuccessfulExits", "goalKicks", "goalKicksLong", "goalKicksShort", "goals", "headShots", "interceptions", "keyPasses", "lateralPasses", "linkupPlays", "longPassLength", "longPasses", "looseBallDuels", "looseBallDuelsWon", "missedBalls", "newDefensiveDuelsWon", "newDuelsWon", "newOffensiveDuelsWon", "newSuccessfulDribbles", "offensiveDuels", "offensiveDuelsWon", "offsides", "opponentHalfRecoveries", "ownHalfLosses", "passLength", "passes", "passesToFinalThird", "penalties", "progressivePasses", "progressiveRun", "receivedPass", "redCards", "secondAssists", "shotAssists", "shotOnTargetAssists", "shots", "shotsBlocked", "shotsOnTarget", "slidingTackles", "smartPasses", "successfulAttackingActions", "successfulBackPasses", "successfulCrosses", "successfulDefensiveAction", "successfulDribbles", "successfulForwardPasses", "successfulGoalKicks", "successfulKeyPasses", "successfulLateralPasses", "successfulLinkupPlays", "successfulLongPasses", "successfulPasses", "successfulPassesToFinalThird", "successfulPenalties", "successfulProgressivePasses", "successfulSlidingTackles", "successfulSmartPasses", "successfulThroughPasses", "successfulVerticalPasses", "thirdAssists", "throughPasses", "touchInBox", "verticalPasses", "xgAssist", "xgSave", "xgShot", "yellowCards"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlayerAdvancedStatsAverage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlayerAdvancedStatsAverage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accelerations": obj.get("accelerations"),
            "aerialDuels": obj.get("aerialDuels"),
            "assists": obj.get("assists"),
            "attackingActions": obj.get("attackingActions"),
            "backPasses": obj.get("backPasses"),
            "ballLosses": obj.get("ballLosses"),
            "ballRecoveries": obj.get("ballRecoveries"),
            "clearances": obj.get("clearances"),
            "corners": obj.get("corners"),
            "counterpressingRecoveries": obj.get("counterpressingRecoveries"),
            "crosses": obj.get("crosses"),
            "dangerousOpponentHalfRecoveries": obj.get("dangerousOpponentHalfRecoveries"),
            "dangerousOwnHalfLosses": obj.get("dangerousOwnHalfLosses"),
            "defensiveActions": obj.get("defensiveActions"),
            "defensiveDuels": obj.get("defensiveDuels"),
            "defensiveDuelsWon": obj.get("defensiveDuelsWon"),
            "directFreeKicks": obj.get("directFreeKicks"),
            "directFreeKicksOnTarget": obj.get("directFreeKicksOnTarget"),
            "directRedCards": obj.get("directRedCards"),
            "dribbleDistanceFromOpponentGoal": obj.get("dribbleDistanceFromOpponentGoal"),
            "dribbles": obj.get("dribbles"),
            "dribblesAgainst": obj.get("dribblesAgainst"),
            "dribblesAgainstWon": obj.get("dribblesAgainstWon"),
            "duels": obj.get("duels"),
            "duelsWon": obj.get("duelsWon"),
            "fieldAerialDuels": obj.get("fieldAerialDuels"),
            "fieldAerialDuelsWon": obj.get("fieldAerialDuelsWon"),
            "forwardPasses": obj.get("forwardPasses"),
            "fouls": obj.get("fouls"),
            "foulsSuffered": obj.get("foulsSuffered"),
            "freeKicks": obj.get("freeKicks"),
            "freeKicksOnTarget": obj.get("freeKicksOnTarget"),
            "gkAerialDuels": obj.get("gkAerialDuels"),
            "gkAerialDuelsWon": obj.get("gkAerialDuelsWon"),
            "gkConcededGoals": obj.get("gkConcededGoals"),
            "gkExits": obj.get("gkExits"),
            "gkSaves": obj.get("gkSaves"),
            "gkShotsAgainst": obj.get("gkShotsAgainst"),
            "gkSuccessfulExits": obj.get("gkSuccessfulExits"),
            "goalKicks": obj.get("goalKicks"),
            "goalKicksLong": obj.get("goalKicksLong"),
            "goalKicksShort": obj.get("goalKicksShort"),
            "goals": obj.get("goals"),
            "headShots": obj.get("headShots"),
            "interceptions": obj.get("interceptions"),
            "keyPasses": obj.get("keyPasses"),
            "lateralPasses": obj.get("lateralPasses"),
            "linkupPlays": obj.get("linkupPlays"),
            "longPassLength": obj.get("longPassLength"),
            "longPasses": obj.get("longPasses"),
            "looseBallDuels": obj.get("looseBallDuels"),
            "looseBallDuelsWon": obj.get("looseBallDuelsWon"),
            "missedBalls": obj.get("missedBalls"),
            "newDefensiveDuelsWon": obj.get("newDefensiveDuelsWon"),
            "newDuelsWon": obj.get("newDuelsWon"),
            "newOffensiveDuelsWon": obj.get("newOffensiveDuelsWon"),
            "newSuccessfulDribbles": obj.get("newSuccessfulDribbles"),
            "offensiveDuels": obj.get("offensiveDuels"),
            "offensiveDuelsWon": obj.get("offensiveDuelsWon"),
            "offsides": obj.get("offsides"),
            "opponentHalfRecoveries": obj.get("opponentHalfRecoveries"),
            "ownHalfLosses": obj.get("ownHalfLosses"),
            "passLength": obj.get("passLength"),
            "passes": obj.get("passes"),
            "passesToFinalThird": obj.get("passesToFinalThird"),
            "penalties": obj.get("penalties"),
            "progressivePasses": obj.get("progressivePasses"),
            "progressiveRun": obj.get("progressiveRun"),
            "receivedPass": obj.get("receivedPass"),
            "redCards": obj.get("redCards"),
            "secondAssists": obj.get("secondAssists"),
            "shotAssists": obj.get("shotAssists"),
            "shotOnTargetAssists": obj.get("shotOnTargetAssists"),
            "shots": obj.get("shots"),
            "shotsBlocked": obj.get("shotsBlocked"),
            "shotsOnTarget": obj.get("shotsOnTarget"),
            "slidingTackles": obj.get("slidingTackles"),
            "smartPasses": obj.get("smartPasses"),
            "successfulAttackingActions": obj.get("successfulAttackingActions"),
            "successfulBackPasses": obj.get("successfulBackPasses"),
            "successfulCrosses": obj.get("successfulCrosses"),
            "successfulDefensiveAction": obj.get("successfulDefensiveAction"),
            "successfulDribbles": obj.get("successfulDribbles"),
            "successfulForwardPasses": obj.get("successfulForwardPasses"),
            "successfulGoalKicks": obj.get("successfulGoalKicks"),
            "successfulKeyPasses": obj.get("successfulKeyPasses"),
            "successfulLateralPasses": obj.get("successfulLateralPasses"),
            "successfulLinkupPlays": obj.get("successfulLinkupPlays"),
            "successfulLongPasses": obj.get("successfulLongPasses"),
            "successfulPasses": obj.get("successfulPasses"),
            "successfulPassesToFinalThird": obj.get("successfulPassesToFinalThird"),
            "successfulPenalties": obj.get("successfulPenalties"),
            "successfulProgressivePasses": obj.get("successfulProgressivePasses"),
            "successfulSlidingTackles": obj.get("successfulSlidingTackles"),
            "successfulSmartPasses": obj.get("successfulSmartPasses"),
            "successfulThroughPasses": obj.get("successfulThroughPasses"),
            "successfulVerticalPasses": obj.get("successfulVerticalPasses"),
            "thirdAssists": obj.get("thirdAssists"),
            "throughPasses": obj.get("throughPasses"),
            "touchInBox": obj.get("touchInBox"),
            "verticalPasses": obj.get("verticalPasses"),
            "xgAssist": obj.get("xgAssist"),
            "xgSave": obj.get("xgSave"),
            "xgShot": obj.get("xgShot"),
            "yellowCards": obj.get("yellowCards")
        })
        return _obj


