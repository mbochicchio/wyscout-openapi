# coding: utf-8

"""
    Wyscout API (v4)

    [Customer resources](https://www.hudl.com/support/wyscout) | [Customer support](https://www.hudl.com/support/contact)  [Wyscout Data resources](https://footballdata.wyscout.com/resources/)  **IMPORTANT: Version switching planned for July 20th 2021.**  On July 20th 2021 we will switch v3 as the Current version. V2 will become Legacy.  Please see [Versioning](#section/Versioning) section for any related details.  # Overview  This is the product documentation for our API service, in which you can find all definitions and technical information you may need.  # Authentication  ## Overview  This page explain how to authenticate to Wyscout APIs using Basic Access Authentication.  ## Using your client software  Depending on your client software you should be provided with a mechanism for supplying an username and password: that will build the required authentication headers automatically.  For example you can specify the -u argument with curl as username:password.  ## Supplying Basic Access Authentication headers  It is possible to construct the authentication headers manually:  * Build a string of the form username:password. * Encode the string in Base64 * Supply an `Authorization` header with content `Basic` followed by the encoded string.   For example, the string `Aladdin:OpenSesame` encodes to `QWxhZGRpbjpPcGVuU2VzYW1l` in base64,   so you would use this string `Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l`  ## Rate limits  To avoid services overload requests are rate limited. The Wyscout API currently enforces a limit of **12** request per second per API Key.  If the rate limit is exceeded, the API will return the following HTTP 429 response:  ```json   {     \"error\": {       \"code\": 429,       \"message\": \"Too many requests\"     }   } ```  # Data glossary and definitions  At the following link you can find our Data Glossary that describes events, metrics and concepts used across the Wyscout API, Platform and reports.  <a href=\"https://dataglossary.wyscout.com/\" target=\"_blank\">Wyscout Data Glossary</a>   ## Pitch coordinates  ![Pitch map](assets/images/WyscoutDataCoordinates.png)  The event's coordinates depends on the subject. The subject's goal to be defended is always **x=0%** and the attack is always **x=100%**. All values are % expressed as **(x,y)**.  # Versioning  Wyscout gives you the chance to choose between three different sets of API endpoints.  ## Current The latest available version. It includes the most recent endpoints and improvements.  ## Preview The beta version of our next official release. Here we start to implement future improvements and new endpoints.  ## Legacy The old version. This is still available and running, in order to let users adapt their tools to new ones.  ## Version Switch  Wyscout will constantly improve its dataset by adding new endpoints and improving the existing ones. “Preview” version is where you can find last delivered updates. When a new and improved “Current” version is released, the previous version becomes “Legacy” – which means it will not immediately cease to exist, giving you the time to adapt your systems. It will be available and running until another new version – “Current” – is released, at least six months after the previous one.  ![Version Switch](assets/images/WyscoutVersionSwitch.png)  Documentation on [apidocs.wyscout.com](apidocs.wyscout.com) will always be available also for “Legacy” version. Each version will receive support as from the following table:  ![Version Support](assets/images/WyscoutVersionSupport.png)

    The version of the OpenAPI document: 2024-05-09T09:09:27Z
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class MatchAdvancedStatsPasses(BaseModel):
    """
    MatchAdvancedStatsPasses
    """ # noqa: E501
    assists: Optional[StrictInt] = Field(default=None, description="The last action of a player from the goalscoring team, prior to the Goal being scored by a teammate, or an Own goal")
    avg_pass_length: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="avgPassLength")
    avg_pass_to_final_third_length: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="avgPassToFinalThirdLength")
    back_passes: Optional[StrictInt] = Field(default=None, alias="backPasses")
    back_passes_successful: Optional[StrictInt] = Field(default=None, alias="backPassesSuccessful")
    crosses_blocked: Optional[StrictInt] = Field(default=None, description="Not distinguished by height", alias="crossesBlocked")
    crosses_from_left_flank: Optional[StrictInt] = Field(default=None, alias="crossesFromLeftFlank")
    crosses_from_left_flank_successful: Optional[StrictInt] = Field(default=None, alias="crossesFromLeftFlankSuccessful")
    crosses_from_right_flank: Optional[StrictInt] = Field(default=None, alias="crossesFromRightFlank")
    crosses_from_right_flank_successful: Optional[StrictInt] = Field(default=None, alias="crossesFromRightFlankSuccessful")
    crosses_high: Optional[StrictInt] = Field(default=None, description="Cross over waist height", alias="crossesHigh")
    crosses_low: Optional[StrictInt] = Field(default=None, description="Cross cross below waist height", alias="crossesLow")
    crosses_successful: Optional[StrictInt] = Field(default=None, alias="crossesSuccessful")
    crosses_total: Optional[StrictInt] = Field(default=None, description="A ball played from the offensive flanks aimed towards a teammate in the area in front of the opponent’s goal", alias="crossesTotal")
    deep_completed_passes: Optional[StrictInt] = Field(default=None, description="A non-cross Pass that is targeted to the zone within 20 meters of the opponent’s goal", alias="deepCompletedPasses")
    deep_completed_passes_successful: Optional[StrictInt] = Field(default=None, alias="deepCompletedPassesSuccessful")
    forward_passes: Optional[StrictInt] = Field(default=None, alias="forwardPasses")
    forward_passes_successful: Optional[StrictInt] = Field(default=None, alias="forwardPassesSuccessful")
    key_passes: Optional[StrictInt] = Field(default=None, description="A pass that immediately creates a clear goal scoring opportunity for a teammate who in turn fails to score", alias="keyPasses")
    key_passes_successful: Optional[StrictInt] = Field(default=None, alias="keyPassesSuccessful")
    lateral_passes: Optional[StrictInt] = Field(default=None, description="Passes in two 90° angles rotated by 45° facing sideways, longer than 12 meters", alias="lateralPasses")
    lateral_passes_successful: Optional[StrictInt] = Field(default=None, alias="lateralPassesSuccessful")
    long_passes: Optional[StrictInt] = Field(default=None, alias="longPasses")
    long_passes_successful: Optional[StrictInt] = Field(default=None, alias="longPassesSuccessful")
    match_tempo: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of team passes per minute of pure ball possession", alias="matchTempo")
    pass_to_final_thirds: Optional[StrictInt] = Field(default=None, alias="passToFinalThirds")
    pass_to_final_thirds_successful: Optional[StrictInt] = Field(default=None, alias="passToFinalThirdsSuccessful")
    pass_to_penalty_areas: Optional[StrictInt] = Field(default=None, alias="passToPenaltyAreas")
    pass_to_penalty_areas_successful: Optional[StrictInt] = Field(default=None, alias="passToPenaltyAreasSuccessful")
    passes: Optional[StrictInt] = Field(default=None, description="An attempt to pass the ball to a teammate")
    passes_successful: Optional[StrictInt] = Field(default=None, alias="passesSuccessful")
    progressive_passes: Optional[StrictInt] = Field(default=None, description="A forward pass that attempts to advance a team significantly closer to the opponent’s goal", alias="progressivePasses")
    progressive_passes_successful: Optional[StrictInt] = Field(default=None, alias="progressivePassesSuccessful")
    short_medium_passes: Optional[StrictInt] = Field(default=None, alias="shortMediumPasses")
    short_medium_passes_successful: Optional[StrictInt] = Field(default=None, alias="shortMediumPassesSuccessful")
    shot_assists: Optional[StrictInt] = Field(default=None, description="The last action of a player prior to a teammate having a Shot", alias="shotAssists")
    smart_passes: Optional[StrictInt] = Field(default=None, description="A creative and penetrative pass that attempts to break the opposition's defensive lines to gain a significant advantage in attack", alias="smartPasses")
    smart_passes_successful: Optional[StrictInt] = Field(default=None, alias="smartPassesSuccessful")
    through_passes: Optional[StrictInt] = Field(default=None, description="A pass played into the space behind the defensive line for a teammate to contest", alias="throughPasses")
    through_passes_successful: Optional[StrictInt] = Field(default=None, alias="throughPassesSuccessful")
    vertical_passes: Optional[StrictInt] = Field(default=None, description="<i>Deprecated<i>, same value as lateralPasses", alias="verticalPasses")
    vertical_passes_successful: Optional[StrictInt] = Field(default=None, alias="verticalPassesSuccessful")
    __properties: ClassVar[List[str]] = ["assists", "avgPassLength", "avgPassToFinalThirdLength", "backPasses", "backPassesSuccessful", "crossesBlocked", "crossesFromLeftFlank", "crossesFromLeftFlankSuccessful", "crossesFromRightFlank", "crossesFromRightFlankSuccessful", "crossesHigh", "crossesLow", "crossesSuccessful", "crossesTotal", "deepCompletedPasses", "deepCompletedPassesSuccessful", "forwardPasses", "forwardPassesSuccessful", "keyPasses", "keyPassesSuccessful", "lateralPasses", "lateralPassesSuccessful", "longPasses", "longPassesSuccessful", "matchTempo", "passToFinalThirds", "passToFinalThirdsSuccessful", "passToPenaltyAreas", "passToPenaltyAreasSuccessful", "passes", "passesSuccessful", "progressivePasses", "progressivePassesSuccessful", "shortMediumPasses", "shortMediumPassesSuccessful", "shotAssists", "smartPasses", "smartPassesSuccessful", "throughPasses", "throughPassesSuccessful", "verticalPasses", "verticalPassesSuccessful"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MatchAdvancedStatsPasses from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MatchAdvancedStatsPasses from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assists": obj.get("assists"),
            "avgPassLength": obj.get("avgPassLength"),
            "avgPassToFinalThirdLength": obj.get("avgPassToFinalThirdLength"),
            "backPasses": obj.get("backPasses"),
            "backPassesSuccessful": obj.get("backPassesSuccessful"),
            "crossesBlocked": obj.get("crossesBlocked"),
            "crossesFromLeftFlank": obj.get("crossesFromLeftFlank"),
            "crossesFromLeftFlankSuccessful": obj.get("crossesFromLeftFlankSuccessful"),
            "crossesFromRightFlank": obj.get("crossesFromRightFlank"),
            "crossesFromRightFlankSuccessful": obj.get("crossesFromRightFlankSuccessful"),
            "crossesHigh": obj.get("crossesHigh"),
            "crossesLow": obj.get("crossesLow"),
            "crossesSuccessful": obj.get("crossesSuccessful"),
            "crossesTotal": obj.get("crossesTotal"),
            "deepCompletedPasses": obj.get("deepCompletedPasses"),
            "deepCompletedPassesSuccessful": obj.get("deepCompletedPassesSuccessful"),
            "forwardPasses": obj.get("forwardPasses"),
            "forwardPassesSuccessful": obj.get("forwardPassesSuccessful"),
            "keyPasses": obj.get("keyPasses"),
            "keyPassesSuccessful": obj.get("keyPassesSuccessful"),
            "lateralPasses": obj.get("lateralPasses"),
            "lateralPassesSuccessful": obj.get("lateralPassesSuccessful"),
            "longPasses": obj.get("longPasses"),
            "longPassesSuccessful": obj.get("longPassesSuccessful"),
            "matchTempo": obj.get("matchTempo"),
            "passToFinalThirds": obj.get("passToFinalThirds"),
            "passToFinalThirdsSuccessful": obj.get("passToFinalThirdsSuccessful"),
            "passToPenaltyAreas": obj.get("passToPenaltyAreas"),
            "passToPenaltyAreasSuccessful": obj.get("passToPenaltyAreasSuccessful"),
            "passes": obj.get("passes"),
            "passesSuccessful": obj.get("passesSuccessful"),
            "progressivePasses": obj.get("progressivePasses"),
            "progressivePassesSuccessful": obj.get("progressivePassesSuccessful"),
            "shortMediumPasses": obj.get("shortMediumPasses"),
            "shortMediumPassesSuccessful": obj.get("shortMediumPassesSuccessful"),
            "shotAssists": obj.get("shotAssists"),
            "smartPasses": obj.get("smartPasses"),
            "smartPassesSuccessful": obj.get("smartPassesSuccessful"),
            "throughPasses": obj.get("throughPasses"),
            "throughPassesSuccessful": obj.get("throughPassesSuccessful"),
            "verticalPasses": obj.get("verticalPasses"),
            "verticalPassesSuccessful": obj.get("verticalPassesSuccessful")
        })
        return _obj


