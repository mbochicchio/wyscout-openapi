# coding: utf-8

"""
    Wyscout API (v4)

    [Customer resources](https://www.hudl.com/support/wyscout) | [Customer support](https://www.hudl.com/support/contact)  [Wyscout Data resources](https://footballdata.wyscout.com/resources/)  **IMPORTANT: Version switching planned for July 20th 2021.**  On July 20th 2021 we will switch v3 as the Current version. V2 will become Legacy.  Please see [Versioning](#section/Versioning) section for any related details.  # Overview  This is the product documentation for our API service, in which you can find all definitions and technical information you may need.  # Authentication  ## Overview  This page explain how to authenticate to Wyscout APIs using Basic Access Authentication.  ## Using your client software  Depending on your client software you should be provided with a mechanism for supplying an username and password: that will build the required authentication headers automatically.  For example you can specify the -u argument with curl as username:password.  ## Supplying Basic Access Authentication headers  It is possible to construct the authentication headers manually:  * Build a string of the form username:password. * Encode the string in Base64 * Supply an `Authorization` header with content `Basic` followed by the encoded string.   For example, the string `Aladdin:OpenSesame` encodes to `QWxhZGRpbjpPcGVuU2VzYW1l` in base64,   so you would use this string `Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l`  ## Rate limits  To avoid services overload requests are rate limited. The Wyscout API currently enforces a limit of **12** request per second per API Key.  If the rate limit is exceeded, the API will return the following HTTP 429 response:  ```json   {     \"error\": {       \"code\": 429,       \"message\": \"Too many requests\"     }   } ```  # Data glossary and definitions  At the following link you can find our Data Glossary that describes events, metrics and concepts used across the Wyscout API, Platform and reports.  <a href=\"https://dataglossary.wyscout.com/\" target=\"_blank\">Wyscout Data Glossary</a>   ## Pitch coordinates  ![Pitch map](assets/images/WyscoutDataCoordinates.png)  The event's coordinates depends on the subject. The subject's goal to be defended is always **x=0%** and the attack is always **x=100%**. All values are % expressed as **(x,y)**.  # Versioning  Wyscout gives you the chance to choose between three different sets of API endpoints.  ## Current The latest available version. It includes the most recent endpoints and improvements.  ## Preview The beta version of our next official release. Here we start to implement future improvements and new endpoints.  ## Legacy The old version. This is still available and running, in order to let users adapt their tools to new ones.  ## Version Switch  Wyscout will constantly improve its dataset by adding new endpoints and improving the existing ones. “Preview” version is where you can find last delivered updates. When a new and improved “Current” version is released, the previous version becomes “Legacy” – which means it will not immediately cease to exist, giving you the time to adapt your systems. It will be available and running until another new version – “Current” – is released, at least six months after the previous one.  ![Version Switch](assets/images/WyscoutVersionSwitch.png)  Documentation on [apidocs.wyscout.com](apidocs.wyscout.com) will always be available also for “Legacy” version. Each version will receive support as from the following table:  ![Version Support](assets/images/WyscoutVersionSupport.png)

    The version of the OpenAPI document: 2024-05-09T09:09:27Z
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.list_of_statistics_attacks import ListOfStatisticsAttacks
from openapi_client.models.list_of_statistics_defense import ListOfStatisticsDefense
from openapi_client.models.list_of_statistics_duels import ListOfStatisticsDuels
from openapi_client.models.list_of_statistics_flanks import ListOfStatisticsFlanks
from openapi_client.models.list_of_statistics_general import ListOfStatisticsGeneral
from openapi_client.models.list_of_statistics_open_play import ListOfStatisticsOpenPlay
from openapi_client.models.list_of_statistics_passes import ListOfStatisticsPasses
from openapi_client.models.list_of_statistics_possession import ListOfStatisticsPossession
from openapi_client.models.list_of_statistics_transitions import ListOfStatisticsTransitions
from openapi_client.models.match import Match
from openapi_client.models.teams_details import TeamsDetails
from typing import Optional, Set
from typing_extensions import Self

class MatchAdvancedStats(BaseModel):
    """
    Returns advanced statistics of a given match
    """ # noqa: E501
    attacks: Optional[ListOfStatisticsAttacks] = None
    defence: Optional[ListOfStatisticsDefense] = None
    duels: Optional[ListOfStatisticsDuels] = None
    flanks: Optional[ListOfStatisticsFlanks] = None
    general: Optional[ListOfStatisticsGeneral] = None
    match: Optional[Match] = Field(default=None, description="Available with querystring param `details=match`")
    match_id: Optional[StrictInt] = Field(default=None, alias="matchId")
    open_play: Optional[ListOfStatisticsOpenPlay] = Field(default=None, alias="openPlay")
    passes: Optional[ListOfStatisticsPasses] = None
    possession: Optional[ListOfStatisticsPossession] = None
    teams: Optional[TeamsDetails] = None
    transitions: Optional[ListOfStatisticsTransitions] = None
    __properties: ClassVar[List[str]] = ["attacks", "defence", "duels", "flanks", "general", "match", "matchId", "openPlay", "passes", "possession", "teams", "transitions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MatchAdvancedStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attacks
        if self.attacks:
            _dict['attacks'] = self.attacks.to_dict()
        # override the default output from pydantic by calling `to_dict()` of defence
        if self.defence:
            _dict['defence'] = self.defence.to_dict()
        # override the default output from pydantic by calling `to_dict()` of duels
        if self.duels:
            _dict['duels'] = self.duels.to_dict()
        # override the default output from pydantic by calling `to_dict()` of flanks
        if self.flanks:
            _dict['flanks'] = self.flanks.to_dict()
        # override the default output from pydantic by calling `to_dict()` of general
        if self.general:
            _dict['general'] = self.general.to_dict()
        # override the default output from pydantic by calling `to_dict()` of match
        if self.match:
            _dict['match'] = self.match.to_dict()
        # override the default output from pydantic by calling `to_dict()` of open_play
        if self.open_play:
            _dict['openPlay'] = self.open_play.to_dict()
        # override the default output from pydantic by calling `to_dict()` of passes
        if self.passes:
            _dict['passes'] = self.passes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of possession
        if self.possession:
            _dict['possession'] = self.possession.to_dict()
        # override the default output from pydantic by calling `to_dict()` of teams
        if self.teams:
            _dict['teams'] = self.teams.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transitions
        if self.transitions:
            _dict['transitions'] = self.transitions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MatchAdvancedStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attacks": ListOfStatisticsAttacks.from_dict(obj["attacks"]) if obj.get("attacks") is not None else None,
            "defence": ListOfStatisticsDefense.from_dict(obj["defence"]) if obj.get("defence") is not None else None,
            "duels": ListOfStatisticsDuels.from_dict(obj["duels"]) if obj.get("duels") is not None else None,
            "flanks": ListOfStatisticsFlanks.from_dict(obj["flanks"]) if obj.get("flanks") is not None else None,
            "general": ListOfStatisticsGeneral.from_dict(obj["general"]) if obj.get("general") is not None else None,
            "match": Match.from_dict(obj["match"]) if obj.get("match") is not None else None,
            "matchId": obj.get("matchId"),
            "openPlay": ListOfStatisticsOpenPlay.from_dict(obj["openPlay"]) if obj.get("openPlay") is not None else None,
            "passes": ListOfStatisticsPasses.from_dict(obj["passes"]) if obj.get("passes") is not None else None,
            "possession": ListOfStatisticsPossession.from_dict(obj["possession"]) if obj.get("possession") is not None else None,
            "teams": TeamsDetails.from_dict(obj["teams"]) if obj.get("teams") is not None else None,
            "transitions": ListOfStatisticsTransitions.from_dict(obj["transitions"]) if obj.get("transitions") is not None else None
        })
        return _obj


