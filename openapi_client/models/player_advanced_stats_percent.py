# coding: utf-8

"""
    Wyscout API (v4)

    [Customer resources](https://www.hudl.com/support/wyscout) | [Customer support](https://www.hudl.com/support/contact)  [Wyscout Data resources](https://footballdata.wyscout.com/resources/)  **IMPORTANT: Version switching planned for July 20th 2021.**  On July 20th 2021 we will switch v3 as the Current version. V2 will become Legacy.  Please see [Versioning](#section/Versioning) section for any related details.  # Overview  This is the product documentation for our API service, in which you can find all definitions and technical information you may need.  # Authentication  ## Overview  This page explain how to authenticate to Wyscout APIs using Basic Access Authentication.  ## Using your client software  Depending on your client software you should be provided with a mechanism for supplying an username and password: that will build the required authentication headers automatically.  For example you can specify the -u argument with curl as username:password.  ## Supplying Basic Access Authentication headers  It is possible to construct the authentication headers manually:  * Build a string of the form username:password. * Encode the string in Base64 * Supply an `Authorization` header with content `Basic` followed by the encoded string.   For example, the string `Aladdin:OpenSesame` encodes to `QWxhZGRpbjpPcGVuU2VzYW1l` in base64,   so you would use this string `Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l`  ## Rate limits  To avoid services overload requests are rate limited. The Wyscout API currently enforces a limit of **12** request per second per API Key.  If the rate limit is exceeded, the API will return the following HTTP 429 response:  ```json   {     \"error\": {       \"code\": 429,       \"message\": \"Too many requests\"     }   } ```  # Data glossary and definitions  At the following link you can find our Data Glossary that describes events, metrics and concepts used across the Wyscout API, Platform and reports.  <a href=\"https://dataglossary.wyscout.com/\" target=\"_blank\">Wyscout Data Glossary</a>   ## Pitch coordinates  ![Pitch map](assets/images/WyscoutDataCoordinates.png)  The event's coordinates depends on the subject. The subject's goal to be defended is always **x=0%** and the attack is always **x=100%**. All values are % expressed as **(x,y)**.  # Versioning  Wyscout gives you the chance to choose between three different sets of API endpoints.  ## Current The latest available version. It includes the most recent endpoints and improvements.  ## Preview The beta version of our next official release. Here we start to implement future improvements and new endpoints.  ## Legacy The old version. This is still available and running, in order to let users adapt their tools to new ones.  ## Version Switch  Wyscout will constantly improve its dataset by adding new endpoints and improving the existing ones. “Preview” version is where you can find last delivered updates. When a new and improved “Current” version is released, the previous version becomes “Legacy” – which means it will not immediately cease to exist, giving you the time to adapt your systems. It will be available and running until another new version – “Current” – is released, at least six months after the previous one.  ![Version Switch](assets/images/WyscoutVersionSwitch.png)  Documentation on [apidocs.wyscout.com](apidocs.wyscout.com) will always be available also for “Legacy” version. Each version will receive support as from the following table:  ![Version Support](assets/images/WyscoutVersionSupport.png)

    The version of the OpenAPI document: 2024-05-09T09:09:27Z
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PlayerAdvancedStatsPercent(BaseModel):
    """
    PlayerAdvancedStatsPercent
    """ # noqa: E501
    aerial_duels_won: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="aerialDuelsWon")
    defensive_duels_won: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="defensiveDuelsWon")
    direct_free_kicks_on_target: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="directFreeKicksOnTarget")
    dribbles_against_won: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="dribblesAgainstWon")
    duels_won: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="duelsWon")
    field_aerial_duels_won: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="fieldAerialDuelsWon")
    gk_aerial_duels_won: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="<i>Only Goalkeeper</i>", alias="gkAerialDuelsWon")
    gk_saves: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A successful attempt from the goalkeeper to prevent a shot from being scored, <i>Only Goalkeeper</i>", alias="gkSaves")
    gk_successful_exits: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="<i>Only Goalkeeper</i>", alias="gkSuccessfulExits")
    goal_conversion: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Shots converted into a goal", alias="goalConversion")
    head_shots_on_target: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="headShotsOnTarget")
    new_defensive_duels_won: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="newDefensiveDuelsWon")
    new_duels_won: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="newDuelsWon")
    new_offensive_duels_won: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="newOffensiveDuelsWon")
    new_successful_dribbles: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="newSuccessfulDribbles")
    offensive_duels_won: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="offensiveDuelsWon")
    penalties_conversion: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Penalties converted into a goal", alias="penaltiesConversion")
    shots_on_target: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="shotsOnTarget")
    successful_back_passes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="successfulBackPasses")
    successful_crosses: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="successfulCrosses")
    successful_dribbles: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="successfulDribbles")
    successful_forward_passes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="successfulForwardPasses")
    successful_goal_kicks: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="successfulGoalKicks")
    successful_key_passes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="successfulKeyPasses")
    successful_lateral_passes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="successfulLateralPasses")
    successful_linkup_plays: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="successfulLinkupPlays")
    successful_long_passes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="successfulLongPasses")
    successful_passes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="successfulPasses")
    successful_passes_to_final_third: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="successfulPassesToFinalThird")
    successful_progressive_passes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="successfulProgressivePasses")
    successful_shot_assists: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="successfulShotAssists")
    successful_sliding_tackles: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="successfulSlidingTackles")
    successful_smart_passes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="successfulSmartPasses")
    successful_through_passes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="successfulThroughPasses")
    successful_vertical_passes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="<i>Deprecated<i>, Same value as successfulLateralPasses", alias="successfulVerticalPasses")
    win: Optional[Union[StrictFloat, StrictInt]] = None
    yellow_cards_per_foul: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="yellowCardsPerFoul")
    __properties: ClassVar[List[str]] = ["aerialDuelsWon", "defensiveDuelsWon", "directFreeKicksOnTarget", "dribblesAgainstWon", "duelsWon", "fieldAerialDuelsWon", "gkAerialDuelsWon", "gkSaves", "gkSuccessfulExits", "goalConversion", "headShotsOnTarget", "newDefensiveDuelsWon", "newDuelsWon", "newOffensiveDuelsWon", "newSuccessfulDribbles", "offensiveDuelsWon", "penaltiesConversion", "shotsOnTarget", "successfulBackPasses", "successfulCrosses", "successfulDribbles", "successfulForwardPasses", "successfulGoalKicks", "successfulKeyPasses", "successfulLateralPasses", "successfulLinkupPlays", "successfulLongPasses", "successfulPasses", "successfulPassesToFinalThird", "successfulProgressivePasses", "successfulShotAssists", "successfulSlidingTackles", "successfulSmartPasses", "successfulThroughPasses", "successfulVerticalPasses", "win", "yellowCardsPerFoul"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlayerAdvancedStatsPercent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlayerAdvancedStatsPercent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aerialDuelsWon": obj.get("aerialDuelsWon"),
            "defensiveDuelsWon": obj.get("defensiveDuelsWon"),
            "directFreeKicksOnTarget": obj.get("directFreeKicksOnTarget"),
            "dribblesAgainstWon": obj.get("dribblesAgainstWon"),
            "duelsWon": obj.get("duelsWon"),
            "fieldAerialDuelsWon": obj.get("fieldAerialDuelsWon"),
            "gkAerialDuelsWon": obj.get("gkAerialDuelsWon"),
            "gkSaves": obj.get("gkSaves"),
            "gkSuccessfulExits": obj.get("gkSuccessfulExits"),
            "goalConversion": obj.get("goalConversion"),
            "headShotsOnTarget": obj.get("headShotsOnTarget"),
            "newDefensiveDuelsWon": obj.get("newDefensiveDuelsWon"),
            "newDuelsWon": obj.get("newDuelsWon"),
            "newOffensiveDuelsWon": obj.get("newOffensiveDuelsWon"),
            "newSuccessfulDribbles": obj.get("newSuccessfulDribbles"),
            "offensiveDuelsWon": obj.get("offensiveDuelsWon"),
            "penaltiesConversion": obj.get("penaltiesConversion"),
            "shotsOnTarget": obj.get("shotsOnTarget"),
            "successfulBackPasses": obj.get("successfulBackPasses"),
            "successfulCrosses": obj.get("successfulCrosses"),
            "successfulDribbles": obj.get("successfulDribbles"),
            "successfulForwardPasses": obj.get("successfulForwardPasses"),
            "successfulGoalKicks": obj.get("successfulGoalKicks"),
            "successfulKeyPasses": obj.get("successfulKeyPasses"),
            "successfulLateralPasses": obj.get("successfulLateralPasses"),
            "successfulLinkupPlays": obj.get("successfulLinkupPlays"),
            "successfulLongPasses": obj.get("successfulLongPasses"),
            "successfulPasses": obj.get("successfulPasses"),
            "successfulPassesToFinalThird": obj.get("successfulPassesToFinalThird"),
            "successfulProgressivePasses": obj.get("successfulProgressivePasses"),
            "successfulShotAssists": obj.get("successfulShotAssists"),
            "successfulSlidingTackles": obj.get("successfulSlidingTackles"),
            "successfulSmartPasses": obj.get("successfulSmartPasses"),
            "successfulThroughPasses": obj.get("successfulThroughPasses"),
            "successfulVerticalPasses": obj.get("successfulVerticalPasses"),
            "win": obj.get("win"),
            "yellowCardsPerFoul": obj.get("yellowCardsPerFoul")
        })
        return _obj


